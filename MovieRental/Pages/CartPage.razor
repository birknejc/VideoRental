@page "/cart"
@using MovieRental.Models
@using MovieRental.Services
@inject CartService CartService
@inject OrderService OrderService
@inject NavigationManager Navigation

<h3>Cart</h3>

@if (!CartService.GetCartItems().Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <div class="row">
        @foreach (var movie in CartService.GetCartItems())
        {
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@movie.Title</h5>
                        <p class="card-text">@movie.Description</p>
                        <p class="card-text">Format: @movie.Format</p>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(movie.Id)">Remove</button>
                    </div>
                </div>
            </div>
        }
    </div>

    <EditForm Model="order" OnValidSubmit="PlaceOrder">
        <div class="form-group">
            <label for="customerName">Customer Name</label>
            <InputText id="customerName" class="form-control" @bind-Value="order.CustomerName" />
        </div>
        <div class="form-group">
            <label for="customerEmail">Customer Email</label>
            <InputText id="customerEmail" class="form-control" @bind-Value="order.CustomerEmail" />
        </div>
        <button type="submit" class="btn btn-primary mt-3">Place Order</button>
    </EditForm>
}

@if (isOrderPlaced)
{
    <div class="alert alert-success mt-3">
        Order completed successfully!
    </div>
}

@code {
    private bool isOrderPlaced = false;
    private Order order = new Order(); // Initialize an empty order

    private void RemoveFromCart(int movieId)
    {
        CartService.RemoveFromCart(movieId);
    }

    private async Task PlaceOrder()
    {
        try
        {
            var cartItems = CartService.GetCartItems().ToList();

            if (cartItems.Any())
            {
                order.Movies = cartItems; // Assign the cart items to the order
                await OrderService.PlaceOrderAsync(order);

                CartService.ClearCart();
                isOrderPlaced = true;

                // Clear the form fields after placing the order
                order = new Order();
            }
        }
        catch (Exception)
        {
            isOrderPlaced = false;
        }
    }
}
